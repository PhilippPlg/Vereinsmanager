package com.mycompany.vereinsmanager.Dialogs;

import com.mycompany.vereinsmanager.Entities.NormalesMitglied;
import com.mycompany.vereinsmanager.Enums.ESaveObject;
import com.mycompany.vereinsmanager.main.XMLSerializer;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author Tim
 */
public final class BeitraegeDialog extends javax.swing.JDialog {
    
    private ArrayList<NormalesMitglied> mitglieder;
    /**
     * Creates new form BeitraegeDialog
     * @param parent Frame von dem der Dialog geöffnet wird, null akzeptiert
     * @param modal true sperrt die weitere Ausführung von obenliegenden GUI-Elementen, während dieser Dialog geöffnet ist
     */
    public BeitraegeDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    /**
     *
     * @param parent Frame von dem der Dialog geöffnet wird, null akzeptiert
     * @param modal true sperrt die weitere Ausführung von obenliegenden GUI-Elementen, während dieser Dialog geöffnet ist
     * @param mitglieder Mitgliederliste als ArrayList
     */
    public BeitraegeDialog(java.awt.Frame parent, boolean modal, ArrayList<NormalesMitglied> mitglieder) {
        super(parent, modal);
        this.mitglieder = mitglieder;
        initComponents();
        createTree();
        this.validate();
    }
    
    /**
     * Erzeugt aus allen Mitgliedern mit offenen Beitragszahlungen ein TreeModel
     * und lädt dieses in treeBeitraege
     */
    public void createTree() {
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("Mitglieder");
        DefaultTreeModel model = new DefaultTreeModel( root );
        int count = 0;
        for( int i = 0; i < mitglieder.size(); i++ ) {
            // Nur Mitglieder mit offenem Beitrag anzeigen
            if( mitglieder.get(i).getZuZahlenderBetrag() > 0 ) {
                DefaultMutableTreeNode currentNode = new DefaultMutableTreeNode(
                    // Das ist super hässlich aber wenn die Mail am Anfang steht können wir das einfacher (und sicherer) splitten :) Keine " " und keine ")(" in Mails
                    mitglieder.get(i).getEmail() + " (" + mitglieder.get(i).getVorname() + " " + mitglieder.get(i).getNachname() + ")" 
                );
                currentNode.add( new DefaultMutableTreeNode( mitglieder.get(i).getZuZahlenderBetrag() ) );
                model.insertNodeInto( currentNode , root, count);
                count++;
            }
        }
        model.reload(root);
        this.treeBeitraege.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        treeBeitraege = new javax.swing.JTree();
        lblTitle = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        treeBeitraege.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                treeBeitraegeMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(treeBeitraege);
        treeBeitraege.getAccessibleContext().setAccessibleParent(this);

        lblTitle.setText("Ausstehende Mitgliedsbeiträge");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 19, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void treeBeitraegeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_treeBeitraegeMouseClicked
        // Doppelklick
        if (evt.getClickCount() == 2) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) this.treeBeitraege.getLastSelectedPathComponent();
                if (node == null) {
                    return;
                }
                // Unterste Ebene ist 0 => Ebene auf der Beiträge stehen
                if( ( node.getDepth() == 0 ) ) {
                    // Wenn wir ändern wie die User im Tree angezeigt werden funktioniert das so nicht mehr
                    String email = node.getParent().toString().split(" ")[0];
                    // Confirmationbox bauen
                    Object[] buttonOptions = {"Beitrag wurde bezahlt",
                    "Abbrechen"};
                    int confirmation = JOptionPane.showOptionDialog(null,
                        "Soll der markierte Beitrag als bezahlt markiert werden?",
                        "Beitragstilgung",
                        JOptionPane.OK_CANCEL_OPTION,
                        JOptionPane.QUESTION_MESSAGE,
                        null,
                        buttonOptions,
                        null);
                    
                    // "Beitrag wurde bezahlt" wurde bestätigt
                    if( confirmation == JOptionPane.OK_OPTION ) {
                        ArrayList<Object> mitgliederSaveList = new ArrayList();
                        for( int i = 0; i < this.mitglieder.size(); i++ ) {
                            if( mitglieder.get(i).getEmail().equals( email ) ) {
                                mitglieder.get(i).setZuZahlenderBetrag(0);
                            }
                            mitgliederSaveList.add(mitglieder.get(i));
                        }
                        try {
                            XMLSerializer.serializeToXML(mitgliederSaveList, ESaveObject.normalesMitglied);
                        } catch (IOException ex) {
                            Logger.getLogger(SpielerDialog.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        
                        // Muss nochmal aufgerufen werden um den Tree neu zu erstellen
                        createTree();
                    }
                }
            }
    }//GEN-LAST:event_treeBeitraegeMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BeitraegeDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BeitraegeDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BeitraegeDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BeitraegeDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                BeitraegeDialog dialog = new BeitraegeDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTree treeBeitraege;
    // End of variables declaration//GEN-END:variables
}
