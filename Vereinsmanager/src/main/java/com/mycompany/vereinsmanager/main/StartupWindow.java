package com.mycompany.vereinsmanager.main;

import com.mycompany.vereinsmanager.Dialogs.BeitraegeDialog;
import com.mycompany.vereinsmanager.Entities.Mannschaft;
import com.mycompany.vereinsmanager.Enums.EZugehoerigkeit;
import com.mycompany.vereinsmanager.Dialogs.MannschaftDialog;
import com.mycompany.vereinsmanager.Dialogs.MitgliedDialog;
import com.mycompany.vereinsmanager.Dialogs.SpielDialog;
import com.mycompany.vereinsmanager.Entities.NormalesMitglied;
import com.mycompany.vereinsmanager.Entities.Profispieler;
import com.mycompany.vereinsmanager.Entities.Spiel;
import com.mycompany.vereinsmanager.Entities.Trainer;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.NavigableSet;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JList;

/**
 * Mainframe/Hauptansicht des Vereinsmanagers
 * @author Timo
 */
public class StartupWindow extends javax.swing.JFrame {

    /**
     * Zugehöriger Mannschaftsdialog
     */
    public MannschaftDialog mannschaftDialog;
    
    /**
     * Zugehöriger Spieledialog
     */
    public SpielDialog spielDialog;
    
    /**
     * Zugehöriger Profispielerdialog
     */
    public MitgliedDialog spielerDialog;
    
    /**
     * Zugehöriger Beitragsdialog
     */
    public BeitraegeDialog beitraegeDialog;
    
    /**
     * Creates new form StartupWindow
     */
    public StartupWindow() {
        initComponents();
        showTrainer();
        showSpiele();
        this.setTitle("Handballverein ITFM4");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jContentWindow = new javax.swing.JTabbedPane();
        jMannschaftTab = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lbMannschaft = new javax.swing.JList<>();
        btnAddMannschaft = new javax.swing.JButton();
        jMitgliedTab = new javax.swing.JPanel();
        btnAddMitglied = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        lbMitglieder = new javax.swing.JList<>();
        btnBeitraegeAnzeigen = new javax.swing.JButton();
        jSpielerTab = new javax.swing.JPanel();
        btnAddSpieler = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        lbSpieler = new javax.swing.JList<>();
        jSpielTab = new javax.swing.JPanel();
        btnAddSpiel = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        lbSpiele = new javax.swing.JList<>();
        jTrainerTab = new javax.swing.JPanel();
        btnAddTrainer = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        lbTrainer = new javax.swing.JList<>();

        jMenu1.setText("jMenu1");

        jMenu2.setText("jMenu2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jMannschaftTab.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jMannschaftTabComponentShown(evt);
            }
        });

        lbMannschaft.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Mannschaft 1", "Mannschaft 2", "Mannschaft 3", "Mannschaft 4", "Mannschaft 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        lbMannschaft.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbMannschaftMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(lbMannschaft);

        btnAddMannschaft.setText("Mannschaft erstellen");
        btnAddMannschaft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMannschaftActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jMannschaftTabLayout = new javax.swing.GroupLayout(jMannschaftTab);
        jMannschaftTab.setLayout(jMannschaftTabLayout);
        jMannschaftTabLayout.setHorizontalGroup(
            jMannschaftTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jMannschaftTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jMannschaftTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jMannschaftTabLayout.createSequentialGroup()
                        .addComponent(btnAddMannschaft)
                        .addGap(0, 496, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jMannschaftTabLayout.setVerticalGroup(
            jMannschaftTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jMannschaftTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAddMannschaft)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
                .addContainerGap())
        );

        jContentWindow.addTab("Mannschaften", jMannschaftTab);

        jMitgliedTab.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jMitgliedTabComponentShown(evt);
            }
        });

        btnAddMitglied.setText("Mitglied erstellen");
        btnAddMitglied.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMitgliedActionPerformed(evt);
            }
        });

        lbMitglieder.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        lbMitglieder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbMitgliederMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(lbMitglieder);

        btnBeitraegeAnzeigen.setText("Ausstehende Beträge anzeigen");
        btnBeitraegeAnzeigen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBeitraegeAnzeigenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jMitgliedTabLayout = new javax.swing.GroupLayout(jMitgliedTab);
        jMitgliedTab.setLayout(jMitgliedTabLayout);
        jMitgliedTabLayout.setHorizontalGroup(
            jMitgliedTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jMitgliedTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jMitgliedTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jMitgliedTabLayout.createSequentialGroup()
                        .addComponent(btnAddMitglied)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnBeitraegeAnzeigen)
                        .addGap(0, 323, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jMitgliedTabLayout.setVerticalGroup(
            jMitgliedTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jMitgliedTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jMitgliedTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnAddMitglied, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnBeitraegeAnzeigen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
                .addContainerGap())
        );

        jContentWindow.addTab("Mitglieder", jMitgliedTab);

        jSpielerTab.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jSpielerTabComponentShown(evt);
            }
        });

        btnAddSpieler.setText("Spieler erstellen");
        btnAddSpieler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddSpielerActionPerformed(evt);
            }
        });

        lbSpieler.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        lbSpieler.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbSpielerMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(lbSpieler);

        javax.swing.GroupLayout jSpielerTabLayout = new javax.swing.GroupLayout(jSpielerTab);
        jSpielerTab.setLayout(jSpielerTabLayout);
        jSpielerTabLayout.setHorizontalGroup(
            jSpielerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jSpielerTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jSpielerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(jSpielerTabLayout.createSequentialGroup()
                        .addComponent(btnAddSpieler)
                        .addGap(0, 520, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jSpielerTabLayout.setVerticalGroup(
            jSpielerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jSpielerTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAddSpieler)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
                .addContainerGap())
        );

        jContentWindow.addTab("Spieler", jSpielerTab);

        btnAddSpiel.setText("Spiel erstellen");
        btnAddSpiel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddSpielActionPerformed(evt);
            }
        });

        lbSpiele.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        lbSpiele.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbSpieleMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(lbSpiele);

        javax.swing.GroupLayout jSpielTabLayout = new javax.swing.GroupLayout(jSpielTab);
        jSpielTab.setLayout(jSpielTabLayout);
        jSpielTabLayout.setHorizontalGroup(
            jSpielTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jSpielTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jSpielTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addGroup(jSpielTabLayout.createSequentialGroup()
                        .addComponent(btnAddSpiel)
                        .addGap(0, 530, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jSpielTabLayout.setVerticalGroup(
            jSpielTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jSpielTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAddSpiel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
                .addContainerGap())
        );

        jContentWindow.addTab("Spiele", jSpielTab);

        jTrainerTab.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jTrainerTabComponentShown(evt);
            }
        });

        btnAddTrainer.setText("Trainer erstellen");
        btnAddTrainer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddTrainerActionPerformed(evt);
            }
        });

        lbTrainer.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        lbTrainer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbTrainerMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(lbTrainer);

        javax.swing.GroupLayout jTrainerTabLayout = new javax.swing.GroupLayout(jTrainerTab);
        jTrainerTab.setLayout(jTrainerTabLayout);
        jTrainerTabLayout.setHorizontalGroup(
            jTrainerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jTrainerTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jTrainerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5)
                    .addGroup(jTrainerTabLayout.createSequentialGroup()
                        .addComponent(btnAddTrainer, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 518, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jTrainerTabLayout.setVerticalGroup(
            jTrainerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jTrainerTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAddTrainer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jContentWindow.addTab("Trainer", jTrainerTab);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jContentWindow)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jContentWindow)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Mitglied erstellen Button Action, ruft den Dialog zum Erzeugen eines Mitglieds auf
     * @param evt Event, wird nicht weiter verwendet (Netbeansvorgabe)
     */
    private void btnAddMitgliedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddMitgliedActionPerformed
        mitgliedDialogErzeugen(true, null);
    }//GEN-LAST:event_btnAddMitgliedActionPerformed

    /**
     * Mannschaft erstellen Button Action, ruft den Dialog zum Erzeugen einer Mannschaft auf
     * @param evt Event, wird nicht weiter verwendet (Netbeansvorgabe)
     */
    private void btnAddMannschaftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddMannschaftActionPerformed
        mannschaftDialogErzeugen(true, null);
    }//GEN-LAST:event_btnAddMannschaftActionPerformed
    
    /**
     * Profispieler erstellen Button Action, ruft den Dialog zum Erzeugen eines Spielers auf
     * @param evt Event, wird nicht weiter verwendet (Netbeansvorgabe)
     */
    private void btnAddSpielerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddSpielerActionPerformed
        try {
            spielerDialogErzeugen(true, null);
        } catch (IOException ex) {
            Logger.getLogger(StartupWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAddSpielerActionPerformed

    /**
     * Spiel erstellen Button Action, ruft den Dialog zum Erzeugen eines Spiels auf
     * @param evt Event, wird nicht weiter verwendet (Netbeansvorgabe)
     */
    private void btnAddSpielActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddSpielActionPerformed
        try {
            spielDialogErzeugen(true, null);
        } catch (IOException ex) {
            Logger.getLogger(StartupWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAddSpielActionPerformed
    
    /**
     * Trainer erstellen Button Action, ruft den Dialog zum Erzeugen eines Trainers auf
     * @param evt Event, wird nicht weiter verwendet (Netbeansvorgabe)
     */
    private void btnAddTrainerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddTrainerActionPerformed
        try {
            trainerDialogErzeugen(true, null);
        } catch (IOException ex) {
            Logger.getLogger(StartupWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAddTrainerActionPerformed
	
    /**
     * Lädt alle Mitgliederdatensätze in lbMitglieder (lbMitglieder liegt im Mitgliedertab)
     */
    private void showMitglieder() {
        try {
            DefaultListModel model = new DefaultListModel();
            model.addAll(XMLLoader.loadMitglieder());
            lbMitglieder.setModel(model);
        } catch (IOException ex) {
            Logger.getLogger(StartupWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Lädt alle Mannschaftsdatensätze in lbMannschaft (lbMannschaft liegt im Mannschaftstab)
     */
    private void showMannschaften() {
        try {
            DefaultListModel model = new DefaultListModel();
            ArrayList<Mannschaft> mannschaften = XMLLoader.loadMannschaft();
            ArrayList<String> mannschaftsnamen = new ArrayList<String>();
            for (Mannschaft cMannschaft : mannschaften) {
                mannschaftsnamen.add(cMannschaft.getBezeichnung());
            }

            model.addAll(mannschaftsnamen);
            lbMannschaft.setModel(model);
        } catch (IOException ex) {
            Logger.getLogger(StartupWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Lädt alle Spielerdatensätze in lbSpieler(lbSpieler liegt im Spielertab)
     */
    private void showSpieler() {
        try {
            DefaultListModel model = new DefaultListModel();
            model.addAll(XMLLoader.loadProfiSpieler());
            lbSpieler.setModel(model);
        } catch (IOException ex) {
            Logger.getLogger(StartupWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Lädt alle Spieldatensätze in lbSpiele (lbSpiele liegt im Spieletab)
     */
    private void showSpiele() {
        try {
            DefaultListModel model = new DefaultListModel();
            model.addAll(XMLLoader.loadSpiel());
            lbSpiele.setModel(model);
        } catch (IOException ex) {
            Logger.getLogger(StartupWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * Lädt alle Trainerdatensätze in lbTrainer (lbTrainer liegt im Trainertab)
     */
    private void showTrainer() {
        try {
            DefaultListModel model = new DefaultListModel();
            model.addAll(XMLLoader.loadTrainer());
            lbTrainer.setModel(model);
        } catch (IOException ex) {
            Logger.getLogger(StartupWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    
    /**
     * Mannschaftstab ComponentShown Action, zeigt die Mannschaften beim Aufrufen des Mannschaftstabs an
     * @param evt Event, wird nicht weiter verwendet (Netbeansvorgabe)
     */
    private void jMannschaftTabComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jMannschaftTabComponentShown
        showMannschaften();
    }//GEN-LAST:event_jMannschaftTabComponentShown

    /**
     * Mitgliedertab ComponentShown Action, zeigt die Mitglieder beim Aufrufen des Mitgliedertabs an
     * @param evt Event, wird nicht weiter verwendet (Netbeansvorgabe)
     */
    private void jMitgliedTabComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jMitgliedTabComponentShown
        showMitglieder();
    }//GEN-LAST:event_jMitgliedTabComponentShown
    
    /**
     * Spielertab ComponentShown Action, zeigt die Spieler beim Aufrufen des Spielertabs an
     * @param evt Event, wird nicht weiter verwendet (Netbeansvorgabe)
     */
    private void jSpielerTabComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jSpielerTabComponentShown
        showSpieler();
    }//GEN-LAST:event_jSpielerTabComponentShown

    /**
     * Trainertab ComponentShown Action, zeigt die Trainer beim Aufrufen des Trainertabs an
     * @param evt Event, wird nicht weiter verwendet (Netbeansvorgabe)
     */
    private void jTrainerTabComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jTrainerTabComponentShown
        showTrainer();
    }//GEN-LAST:event_jTrainerTabComponentShown

    /**
     * Mannschaftslisten Mausdoppelklick Action, ruft zu der angeklickten Mannschaft den "Mannschaft bearbeiten" Dialog auf
     * @param evt Event, der Mausklick des Nutzers
     */
    private void lbMannschaftMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbMannschaftMouseClicked
        JList list = (JList) evt.getSource();
        if (evt.getClickCount() == 2) {
            try {
                int index = list.locationToIndex(evt.getPoint());
                String Caption = list.getModel().getElementAt(index).toString();
                Mannschaft mannschaft = ermittelMannschaft(Caption);
                mannschaftDialogErzeugen(false, mannschaft);
            } catch (IOException ex) {
                Logger.getLogger(StartupWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_lbMannschaftMouseClicked

    /**
     * Mitgliedslisten Mausdoppelklick Action, ruft zu dem angeklickten Mitglied den "Mitglied bearbeiten" Dialog auf
     * @param evt Event, der Mausklick des Nutzers
     */
    private void lbMitgliederMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbMitgliederMouseClicked
        JList list = (JList) evt.getSource();
        if (evt.getClickCount() == 2) {
            try {
                int index = list.locationToIndex(evt.getPoint());
                String Caption = list.getModel().getElementAt(index).toString();
                NormalesMitglied mitglied = ermittelMitglied(Caption);
                mitgliedDialogErzeugen(false, mitglied);
            } catch (IOException ex) {
                Logger.getLogger(StartupWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_lbMitgliederMouseClicked

    /**
     * Profispielerlisten Mausdoppelklick Action, ruft zu dem angeklickten Profispieler den "Profispieelr bearbeiten" Dialog auf
     * @param evt Event, der Mausklick des Nutzers
     */
    private void lbSpielerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbSpielerMouseClicked
        JList list = (JList) evt.getSource();
        if (evt.getClickCount() == 2) {
            try {
                int index = list.locationToIndex(evt.getPoint());
                String Caption = list.getModel().getElementAt(index).toString();
                Profispieler spieler = ermittelSpieler(Caption);
                spielerDialogErzeugen(false, spieler);
            } catch (IOException ex) {
                Logger.getLogger(StartupWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_lbSpielerMouseClicked

    /**
     * Spiellisten Mausdoppelklick Action, ruft zu dem angeklickten Spiel den "Spiel bearbeiten" Dialog auf
     * @param evt Event, der Mausklick des Nutzers
     */
    private void lbSpieleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbSpieleMouseClicked
        JList list = (JList) evt.getSource();
        if (evt.getClickCount() == 2) {
            try {
                int index = list.locationToIndex(evt.getPoint());
                String Caption = list.getModel().getElementAt(index).toString();
                Spiel spiel = ermittelSpiel(Caption);
                spielDialogErzeugen(false, spiel);
            } catch (IOException ex) {
                Logger.getLogger(StartupWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_lbSpieleMouseClicked

     /**
     * Trainerlisten Mausdoppelklick Action, ruft zu dem angeklickten Spiel den "Spiel bearbeiten" Dialog auf
     * @param evt Event, der Mausklick des Nutzers
     */
    private void lbTrainerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbTrainerMouseClicked
        JList list = (JList) evt.getSource();
        if (evt.getClickCount() == 2) {
            try {
                int index = list.locationToIndex(evt.getPoint());
                String Caption = list.getModel().getElementAt(index).toString();
                Trainer trainer = ermittelTrainer(Caption);
                trainerDialogErzeugen(false, trainer);
            } catch (IOException ex) {
                Logger.getLogger(StartupWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_lbTrainerMouseClicked

    /**
     * Ausstehende Beiträge anzeigen Action, ruft den Dialog mit offenen Mitgliedsbeiträgen auf
     * @param evt Event, wird nicht weiter verwendet (Netbeansvorgabe)
     */
    private void btnBeitraegeAnzeigenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBeitraegeAnzeigenActionPerformed
        try {
            beitraegeDialogErzeugen(XMLLoader.loadMitglieder());
        } catch( IOException ex ) {
            Logger.getLogger(StartupWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnBeitraegeAnzeigenActionPerformed

    /**
     * Erzeugt den Dialog mit ausstehenden Mitgliederbeiträgen
     * @param mitglieder Arraylist mit allen Mitgliedern, die Liste muss nicht bereits gefiltert sein nach offenen Beiträgen
     */
    private void beitraegeDialogErzeugen(ArrayList<NormalesMitglied> mitglieder ) {
        beitraegeDialog = new BeitraegeDialog( this, true, mitglieder );
        beitraegeDialog.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        beitraegeDialog.setDefaultCloseOperation(HIDE_ON_CLOSE);
        beitraegeDialog.setModal(true);
        beitraegeDialog.setVisible(true);
    }
    
    /**
     * Erzeugt den Dialog Mitglied bearbeiten/anlegen
     * @param isNew ob es sich um ein neues Mitglied oder um ein bestehendes handelt
     * @param mitglied Mitglied das geöffnet werden soll
     */
    private void mitgliedDialogErzeugen(Boolean isNew, NormalesMitglied mitglied) {
        try {
            spielerDialog = new MitgliedDialog(EZugehoerigkeit.Mitglieder, isNew, this);
            if (mitglied != null) {
                Double beitrag = mitglied.getZuZahlenderBetrag();
                spielerDialog.setTfVorname(mitglied.getVorname());
                spielerDialog.setTfNachname(mitglied.getNachname());
                spielerDialog.setTfStrasse(mitglied.getStrasse());
                SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.YYYY");
                String date = sdf.format(mitglied.getGeburtsDatum());
                spielerDialog.setTfGeburtsdatum(date);
                spielerDialog.setTfPLZ(mitglied.getPLZ());
                spielerDialog.setTfOrt(mitglied.getOrt());
                spielerDialog.setTfTelefon(mitglied.getTelefonNr());
                spielerDialog.setTfEmail(mitglied.getEmail());
                spielerDialog.setCboMannschaftName(mitglied.getMannschaft());
                spielerDialog.setTfBeitrag( beitrag.toString().replace('.', ',') );
            }
            spielerDialog.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
            spielerDialog.setDefaultCloseOperation(HIDE_ON_CLOSE);
            spielerDialog.setModal(true);
            spielerDialog.setVisible(true);
        } catch (IOException ex) {
            Logger.getLogger(StartupWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * Erzeugt den Dialog Profispieler bearbeiten/anlegen
     * @param isNew ob es sich um einen neuen Profispieler oder um einen bestehenden handelt
     * @param spieler Profispieler der geöffnet werden soll
     * @throws IOException falls die Spielerliste nicht geöffnet werden kann
     */
    private void spielerDialogErzeugen(Boolean isNew, Profispieler spieler) throws IOException {
        spielerDialog = new MitgliedDialog(EZugehoerigkeit.Spieler, isNew, this); //Hier Entity �bergeben und in Konstruktor die Werte setzen(wenn nicht neu)
        if (spieler != null) {
            Double beitrag = spieler.getGehalt();
            spielerDialog.setTfVorname(spieler.getVorname());
            spielerDialog.setTfNachname(spieler.getNachname());
            spielerDialog.setTfStrasse(spieler.getStrasse());
            SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.YYYY");
            String date = sdf.format(spieler.getGeburtsDatum());
            spielerDialog.setTfGeburtsdatum(date);
            spielerDialog.setTfPLZ(spieler.getPLZ());
            spielerDialog.setTfOrt(spieler.getOrt());
            spielerDialog.setTfTelefon(spieler.getTelefonNr());
            spielerDialog.setTfEmail(spieler.getEmail());
            spielerDialog.setCboMannschaftName(spieler.getMannschaft());
            spielerDialog.setTfBeitrag( beitrag.toString().replace('.', ',') );
        }
        spielerDialog.setDefaultCloseOperation(HIDE_ON_CLOSE);
        spielerDialog.setModal(true);
        spielerDialog.setVisible(true);
    }

    /**
     * Erzeugt den Dialog Mannschaft bearbeiten/anlegen
     * @param isNew ob es sich um eine neue Mannschaft oder um eine bestehende handelt
     * @param mannschaft Mannschaft die geöffnet werden soll
     */
    private void mannschaftDialogErzeugen(Boolean isNew, Mannschaft mannschaft) {
        try {
            mannschaftDialog = new MannschaftDialog(isNew, this);
            if (mannschaft != null) {
                mannschaftDialog.setTfBezeichnung(mannschaft.getBezeichnung());
                mannschaftDialog.setcboTrainer(mannschaft.getTrainer());
                ArrayList<String> teamSpieler = new ArrayList<>();
                ArrayList<Profispieler> alleSpieler = XMLLoader.loadProfiSpieler();
                ArrayList<NormalesMitglied> alleMitglieder = XMLLoader.loadMitglieder();
                String mannschaftsName = mannschaft.getBezeichnung();
                for (Profispieler cSpieler : alleSpieler) {
                    String cMannschaftsName = cSpieler.getMannschaft();

                    if (cMannschaftsName == null || mannschaftsName == null) {
                        continue;
                    }
                    if (cMannschaftsName.equals(mannschaftsName)) {
                        teamSpieler.add(cSpieler.getVorname() + " " + cSpieler.getNachname());
                    }
                    break;
                }
                for (NormalesMitglied cMitglied : alleMitglieder) {
                    String cMannschaftsName = cMitglied.getMannschaft();
                    if (cMannschaftsName == null || mannschaftsName == null) {
                        continue;
                    }
                    if (cMannschaftsName.equals(mannschaftsName)) {
                        teamSpieler.add(cMitglied.getVorname() + " " + cMitglied.getNachname());
                    }
                    break;
                }
                mannschaftDialog.setLbSpieler(teamSpieler);
            }
            mannschaftDialog.setDefaultCloseOperation(HIDE_ON_CLOSE);
            mannschaftDialog.setModal(true);
            mannschaftDialog.setVisible(true);
        } catch (IOException ex) {
            Logger.getLogger(StartupWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Erzeugt den Dialog Spiel bearbeiten/anlegen
     * @param isNew ob es sich um ein neues Spiel handelt oder um ein bestehendes
     * @param spiel Spiel das geöffnet werden soll
     * @throws IOException falls die Spieleliste nicht geöffnet/gelesen werden kann
     */
    public void spielDialogErzeugen(Boolean isNew, Spiel spiel) throws IOException {
        spielDialog = new SpielDialog(isNew, this); //Hier Entity �bergeben und in Konstruktor die Werte setzen(wenn nicht neu)
        if (spiel != null) {
            spielDialog.setCboMannschaftName(spiel.getEigenesTeam());
            spielDialog.setTfGegner(spiel.getGegnerTeam());
            spielDialog.setTfOrt(spiel.getOrt());
            Date datum = spiel.getZeitpunkt();
            SimpleDateFormat formatter = new SimpleDateFormat( "HH:mm" );
            String zeit = formatter.format(datum);
            spielDialog.setTfAnfangszeit( zeit );
            if (datum != null) {
                formatter.applyPattern("dd.MM.YYYY");
                String date = formatter.format(datum);
                spielDialog.setTfDatum(date);
                if( datum.after( new Date() ) ) {
                    spielDialog.hideErgebnis();
                }
            }
        }
        spielDialog.setDefaultCloseOperation(HIDE_ON_CLOSE);
        spielDialog.setModal(true);
        spielDialog.setVisible(true);
    }
    
    /**
     * Erzeugt den Dialog Trainer bearbeiten/anlegen
     * @param isNew ob es sich um einen neuen Trainer handelt oder um einen bestehenden
     * @param trainer Trainer der geöffnet werden soll
     * @throws IOException falls die Trainerliste nicht geöffnet/gelesen werden kann
     */
    private void trainerDialogErzeugen(Boolean isNew, Trainer trainer) throws IOException {
        spielerDialog = new MitgliedDialog(EZugehoerigkeit.Trainer, isNew, this); //Hier Entity �bergeben und in Konstruktor die Werte setzen(wenn nicht neu)
        if (trainer != null) {
            Double beitrag = trainer.getGehalt();
            spielerDialog.setTfVorname(trainer.getVorname());
            spielerDialog.setTfNachname(trainer.getNachname());
            spielerDialog.setTfStrasse(trainer.getStrasse());
            SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.YYYY");
            String date = sdf.format(trainer.getGeburtsDatum());
            spielerDialog.setTfGeburtsdatum(date);
            spielerDialog.setTfPLZ(trainer.getPLZ());
            spielerDialog.setTfOrt(trainer.getOrt());
            spielerDialog.setTfTelefon(trainer.getTelefonNr());
            spielerDialog.setTfEmail(trainer.getEmail());
            spielerDialog.setCboMannschaftName(trainer.getMannschaft());
            spielerDialog.setTfBeitrag( beitrag.toString().replace('.', ',') );
        }
        spielerDialog.changeStatecboMannschaften(false);
        spielerDialog.setDefaultCloseOperation(HIDE_ON_CLOSE);
        spielerDialog.setModal(true);
        spielerDialog.setVisible(true);
    }

    /**
     * Lädt die Mannschaftsliste und prüft ob eine Mannschaft mit der übergebenen Bezeichnung existiert
     * @param bezeichnung Bezeichnung der Mannschaft die in der Mannschaftsliste gesucht wird
     * @return Mannschaft, entweder die bestehende Mannschaft, oder eine ungesetzte neue Mannschaft
     * @throws IOException falls die Mannschaftsliste nicht geöffnet/gelesen werden kann
     */
    private Mannschaft ermittelMannschaft(String bezeichnung) throws IOException {
        ArrayList<Mannschaft> mannschaften = XMLLoader.loadMannschaft();
        for (Mannschaft cMannschaft : mannschaften) {
            if (bezeichnung.equals(cMannschaft.getBezeichnung())) {
                return cMannschaft;
            }
        }
        return new Mannschaft();
    }

    /**
     * Lädt die Mitgliederliste und prüft ob ein Mitglied mit dem übergebenen Namen (Vorname Nachname) existiert
     * @param Name Name des Mitglieds das gesucht wird
     * @return NormalesMitglied, entweder das bestehende Mitglied, oder ein ungesetztes neues Mitglied
     * @throws IOException falls die Mitgliederliste nicht geöffnet/gelesen werden kann
     * @todo Name durch Mail ersetzten bitte
     */
    private NormalesMitglied ermittelMitglied(String Name) throws IOException {
        String[] parts = Name.split(" ");
        String vorname = parts[0].trim();
        String nachname = parts[1].trim();
        ArrayList<NormalesMitglied> mitglieder = XMLLoader.loadMitglieder();
        for (NormalesMitglied cMitglied : mitglieder) {
            if (vorname.equals(cMitglied.getVorname()) && nachname.equals(cMitglied.getNachname())) {
                return cMitglied;
            }
        }
        return new NormalesMitglied();
    }

    /**
     * Lädt die Profispielerliste und prüft ob ein Spieler mit dem übergebenen Namen (Vorname Nachname) existiert
     * @param Name Name des Profispielers der gesucht wird
     * @return Profispieler, entweder der bestehende Spieler, oder ein ungesetzter neuer Spieler
     * @throws IOException falls die Profispielerliste nicht geöffnet/gelesen werden kann
     * @todo Name durch Mail ersetzten bitte
     */
    private Profispieler ermittelSpieler(String Name) throws IOException {
        String[] parts = Name.split(" ");
        String vorname = parts[0].trim();
        String nachname = parts[1].trim();
        ArrayList<Profispieler> spieler = XMLLoader.loadProfiSpieler();
        for (Profispieler cSpieler : spieler) {
            if (vorname.equals(cSpieler.getVorname()) && nachname.equals(cSpieler.getNachname())) {
                return cSpieler;
            }
        }
        return new Profispieler();
    }

    /**
     * Lädt die Trainerliste und prüft ob ein Trainer mit dem übergebenen Namen (Vorname Nachname) existiert
     * @param Name Name des Trainers der gesucht wird
     * @return Trainer, entweder der bestehende Trainer, oder ein ungesetzter neuer Trainer
     * @throws IOException falls die Trainerliste nicht geöffnet/gelesen werden kann
     * @todo Name durch Mail ersetzten bitte
     */
    private Trainer ermittelTrainer(String Name) throws IOException {
        String[] parts = Name.split(" ");
        String vorname = parts[0].trim();
        String nachname = parts[1].trim();
        ArrayList<Trainer> trainer = XMLLoader.loadTrainer();
        for (Trainer cTrainer : trainer) {
            if (vorname.equals(cTrainer.getVorname()) && nachname.equals(cTrainer.getNachname())) {
                return cTrainer;
            }
        }
        return new Trainer();
    }

    /**
     * Lädt die Spieleliste und prüft ob ein Spiel mit der übergebenen Bezeichnung (eigenesTeam gegen gegnerTeam) existiert
     * @param Bezeichnung Bezeichnung der Begegnung des Spiels
     * @return Spiel, entweder das bestehende Spiel, oder ein ungesetztes neues Spiel
     * @throws IOException falls die Spieleliste nicht geöffnet/gelesen werden kann
     * @todo hier sollten wir noch das Datum an die Caption hängen oder sowas in der Art
     */
    private Spiel ermittelSpiel(String Bezeichnung) throws IOException {
        ArrayList<Spiel> spiele = XMLLoader.loadSpiel(); //Richtigen PK setzen
        for (Spiel cSpiel : spiele) {
            String spielCaption = cSpiel.getEigenesTeam() + " gegen " + cSpiel.getGegnerTeam();
            if (Bezeichnung.equals(spielCaption)) {
                return cSpiel;
            }
        }
        return new Spiel(null, null, null, null);
    }

    /**
     * Lädt das nächste Spiel der übergebenen Mannschaft
     * @param mannschaft Name/Bezeichnung der eigenen Mannschaft
     * @return Spiel, entweder das nächste Spiel der Mannschaft oder, falls nicht vorhanden, ein ungesetztes neues Spiel
     * @throws IOException falls die Spieleliste nicht geöffnet/gelesen werden kann
     */
    public Spiel ermittelNaechstesSpiel(Mannschaft mannschaft) throws IOException {
        Spiel naechstesSpiel = new Spiel();
        ArrayList<Spiel> alleSpiele = XMLLoader.loadSpiel();
        ArrayList<Spiel> alleMannschaftsSpiele = new ArrayList<>();
        for (Spiel cSpiel : alleSpiele) {
            if (cSpiel.getEigenesTeam().equals(mannschaft.getBezeichnung())) {
                alleMannschaftsSpiele.add(cSpiel);
            }
        }

        NavigableSet<Date> dates = new TreeSet<>();
        alleSpiele.forEach(cSpiel -> {
            dates.add(cSpiel.getZeitpunkt());
        });

        Date now = new Date();
        Date highestDateUpUntilNow = dates.lower(now);

        for (Spiel cSpiel : alleMannschaftsSpiele) {
            if (cSpiel.getZeitpunkt().equals(highestDateUpUntilNow)) {
                naechstesSpiel = cSpiel;
            }
        }
        return naechstesSpiel;
    }

    /**
     * Aktualisiert alle Tabs (Mannschaften, Mitglieder, Spiele, Spieler, Trainer) in der Hauptansicht
     */
    public void allesAktualisieren() {
        showMannschaften();
        showMitglieder();
        showSpiele();
        showSpieler();
        showTrainer();
    }

    /**
     * Mainmethode der Vereinsverwaltung
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StartupWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StartupWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StartupWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StartupWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StartupWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddMannschaft;
    private javax.swing.JButton btnAddMitglied;
    private javax.swing.JButton btnAddSpiel;
    private javax.swing.JButton btnAddSpieler;
    private javax.swing.JButton btnAddTrainer;
    private javax.swing.JButton btnBeitraegeAnzeigen;
    private javax.swing.JTabbedPane jContentWindow;
    private javax.swing.JPanel jMannschaftTab;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JPanel jMitgliedTab;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JPanel jSpielTab;
    private javax.swing.JPanel jSpielerTab;
    private javax.swing.JPanel jTrainerTab;
    private javax.swing.JList<String> lbMannschaft;
    private javax.swing.JList<String> lbMitglieder;
    private javax.swing.JList<String> lbSpiele;
    private javax.swing.JList<String> lbSpieler;
    private javax.swing.JList<String> lbTrainer;
    // End of variables declaration//GEN-END:variables
}
